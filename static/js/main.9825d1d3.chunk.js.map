{"version":3,"sources":["components/Navbar.js","components/Teams.js","components/Tournaments.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","Teams","Tournaments","Results","App","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAkBeA,EAhBA,WACX,OACI,yBAAKC,UAAU,4BACX,yBAAKA,UAAU,aACX,uBAAGC,KAAK,IAAID,UAAU,cAAtB,eACA,wBAAIA,UAAU,SACV,4BAAI,uBAAGC,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,gBAAR,gBACJ,4BAAI,uBAAGA,KAAK,YAAR,gBCATC,EARD,WACV,OACI,yBAAKF,UAAU,aACX,wBAAIA,UAAU,UAAd,WCKGG,EARK,WAChB,OACI,yBAAKH,UAAU,aACX,wBAAIA,UAAU,UAAd,iBCKGI,EARC,WACZ,OACI,yBAAKJ,UAAU,aACX,wBAAIA,UAAU,UAAd,aCmBGK,E,uKAbX,OACE,kBAAC,IAAD,KACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,eAAeC,UAAWL,IACtC,kBAAC,IAAD,CAAOI,KAAK,WAAWC,UAAWJ,U,GAT1BK,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9825d1d3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className=\"nav-wrapper red darken-3\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"brand-logo\">Samara Liga</a>\r\n                <ul className=\"right\">\r\n                    <li><a href=\"/\">Teams</a></li>\r\n                    <li><a href=\"/tournaments\">Torunaments</a></li>\r\n                    <li><a href=\"/results\">Results</a></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\n\r\nconst Teams = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">Teams</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Teams","import React from 'react'\r\n\r\nconst Tournaments = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">Tournaments</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tournaments","import React from 'react'\r\n\r\nconst Results = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">Results</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Results","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport Navbar from './components/Navbar'\nimport Teams from './components/Teams'\nimport Tournaments from './components/Tournaments'\nimport Results from './components/Results'\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Route exact path=\"/\" component={Teams} />\n          <Route path=\"/tournaments\" component={Tournaments} />\n          <Route path=\"/results\" component={Results} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}